{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5","program":"/home/hekuta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","sval","--edition=2018","/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"fmt\"","--cfg","feature=\"std\"","-C","metadata=a4d2488850e50f24","-C","extra-filename=-a4d2488850e50f24","--out-dir","/home/hekuta/Codes/web_hello_tide/target/rls/debug/deps","-L","dependency=/home/hekuta/Codes/web_hello_tide/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/hekuta/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/hekuta/Codes/web_hello_tide/target/rls/debug/deps/libsval-a4d2488850e50f24.rmeta"},"prelude":{"crate_id":{"name":"sval","disambiguator":[14236164638436045018,0]},"crate_root":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src","external_crates":[{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[8373705112501149482,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16909867051943430517,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11260902004430380252,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[12872056181829019095,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10608756751411298727,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4369074810188542311,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12333111663820923515,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12748886438148098175,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6627577059144635863,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15896330838049133250,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2582212836281766037,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4723863376138925013,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[2482912266844122781,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16993901708144586312,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[15622067442351408235,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[12927959315880918009,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[1763799641200411356,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[2454364557606196642,0]}},{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[10980657607002924382,0]}}],"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","byte_start":0,"byte_end":6873,"line_start":1,"line_end":325,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1146},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/mod.rs","byte_start":25448,"byte_end":25455,"line_start":40,"line_end":40,"column_start":25,"column_end":32},"alias_span":null,"name":"ToDebug","value":"","parent":{"krate":0,"index":278}},{"kind":"Use","ref_id":{"krate":0,"index":1147},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/mod.rs","byte_start":25448,"byte_end":25455,"line_start":40,"line_end":40,"column_start":25,"column_end":32},"alias_span":null,"name":"ToDebug","value":"","parent":{"krate":0,"index":278}},{"kind":"Use","ref_id":{"krate":0,"index":379},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":36814,"byte_end":36820,"line_start":211,"line_end":211,"column_start":12,"column_end":18},"alias_span":null,"name":"Source","value":"","parent":{"krate":0,"index":374}},{"kind":"Use","ref_id":{"krate":0,"index":423},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":36831,"byte_end":36840,"line_start":212,"line_end":212,"column_start":10,"column_end":19},"alias_span":null,"name":"Arguments","value":"","parent":{"krate":0,"index":374}},{"kind":"Use","ref_id":{"krate":0,"index":492},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":36863,"byte_end":36874,"line_start":214,"line_end":214,"column_start":9,"column_end":20},"alias_span":null,"name":"OwnedStream","value":"","parent":{"krate":0,"index":374}},{"kind":"Use","ref_id":{"krate":0,"index":557},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":36884,"byte_end":36896,"line_start":215,"line_end":215,"column_start":9,"column_end":21},"alias_span":null,"name":"RefMutStream","value":"","parent":{"krate":0,"index":374}},{"kind":"Use","ref_id":{"krate":0,"index":1197},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":36916,"byte_end":36921,"line_start":217,"line_end":217,"column_start":12,"column_end":17},"alias_span":null,"name":"Stack","value":"","parent":{"krate":0,"index":374}},{"kind":"Use","ref_id":{"krate":0,"index":557},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/mod.rs","byte_start":99994,"byte_end":100006,"line_start":129,"line_end":129,"column_start":24,"column_end":36},"alias_span":null,"name":"Stream","value":"","parent":{"krate":0,"index":791}},{"kind":"Use","ref_id":{"krate":0,"index":1221},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/mod.rs","byte_start":100066,"byte_end":100076,"line_start":132,"line_end":132,"column_start":22,"column_end":32},"alias_span":null,"name":"OwnedValue","value":"","parent":{"krate":0,"index":791}},{"kind":"Use","ref_id":{"krate":0,"index":21},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","byte_start":6480,"byte_end":6485,"line_start":308,"line_end":308,"column_start":22,"column_end":27},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","byte_start":0,"byte_end":6873,"line_start":1,"line_end":325,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":80},{"krate":0,"index":278},{"krate":0,"index":374},{"krate":0,"index":791},{"krate":0,"index":1133},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1140},{"krate":0,"index":1143}],"decl_id":null,"docs":"A small, no-std, object-safe, serialization-only framework.","sig":null,"attributes":[{"value":"*\nA small, no-std, object-safe, serialization-only framework.\n\nThe `sval` API is built around two key traits:\n\n- [`Value`] is a trait for data with a streamable structure. It's like `serde::Serialize`.\n- [`Stream`] is a trait for receiving the structure of a value. It's like `serde::Serializer`.\n\n# Getting started\n\nAdd `sval` to your `Cargo.toml`:\n\n```toml,ignore\n[dependencies.sval]\nversion = \"1.0.0-alpha.5\"\n```\n\n# Supported formats\n\n- [JSON](https://crates.io/crates/sval_json), the ubiquitous JavaScript Object Notation used by many HTTP APIs.\n\n# Streaming values\n\nThe structure of a [`Value`] can be streamed to a [`Stream`].\n\n## in a single call\n\nFor simple use-cases, use the [`stream`](function.stream.html) function to stream the structure of a value:\n\n```no_run\n# #[cfg(not(feature = \"std\"))]\n# fn main() {}\n# #[cfg(feature = \"std\")]\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\nsval::stream(MyStream, 42)?;\n# Ok(())\n# }\n# use sval::stream::{self, Stream};\n# struct MyStream;\n# impl Stream for MyStream {\n#     fn fmt(&mut self, _: stream::Arguments) -> stream::Result { unimplemented!() }\n# }\n```\n\nwhere `42` is a [`Value`] and `MyStream` is a [`Stream`].\n\n## over multiple calls\n\nMore involved use-cases may want to build up structure over time. Use a [`stream::OwnedStream`](stream/struct.OwnedStream.html)\nto hang on to a stream and pass it values over time.\n\nThe following example wraps up a stream in an API that lets callers treat it like a map:\n\n```no_run\n# #[cfg(not(feature = \"std\"))]\n# fn main() {}\n# #[cfg(feature = \"std\")]\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n# let my_stream = MyStream;\n// Create a `Map` stream that wraps up another one\nlet mut stream = Map::new(my_stream)?;\n\n// Stream it some entries\nstream.entry(\"a\", 42)?;\nstream.entry(\"b\", 17)?;\n\n// Eventually we end the wrapper and return the original stream\nlet my_stream = stream.end()?;\n# struct MyStream;\n# struct Map;\n# impl Map {\n#     fn new<T>(_: T) -> Result<Self, Box<dyn std::error::Error>> { Ok(Map) }\n#     fn entry<K, V>(&mut self, _: K, _: V) -> Result<(), Box<dyn std::error::Error>> { Ok(()) }\n#     fn end(self) -> Result<(), Box<dyn std::error::Error>> { Ok(()) }\n# }\n# Ok(())\n}\n```\n\nAn implementation of `Map` could then look like this:\n\n```no_run\nuse sval::{\n    value::Value,\n    stream::{self, OwnedStream},\n};\n\nstruct Map {\n    // Using `OwnedStream<MyStream>` instead of just `MyStream`\n    // gives us better ergonomics and validation\n    stream: OwnedStream<MyStream>,\n}\n\nimpl Map {\n    fn new(stream: MyStream) -> Result<Self, sval::Error> {\n        let mut stream = OwnedStream::new(stream);\n        stream.map_begin(None)?;\n\n        Ok(Map {\n            stream,\n        })\n    }\n\n    fn entry(&mut self, k: impl Value, v: impl Value) -> Result<(), sval::Error> {\n        self.stream.map_key(k)?;\n        self.stream.map_value(v)?;\n\n        Ok(())\n    }\n\n    fn end(mut self) -> Result<MyStream, sval::Error> {\n        self.stream.map_end()?;\n\n        Ok(self.stream.into_inner())\n    }\n}\n# use sval::stream::Stream;\n# struct MyStream;\n# impl Stream for MyStream {\n#     fn fmt(&mut self, _: stream::Arguments) -> stream::Result { unimplemented!() }\n# }\n```\n\n# `serde` integration\n\nUse the `serde` Cargo feature to enable integration with `serde`:\n\n```toml,ignore\n[dependencies.sval]\nfeatures = [\"serde\"]\n```\n\nWhen `serde` is available, the `Value` trait can also be derived\nbased on an existing `Serialize` implementation:\n\n```ignore\n#[macro_use]\nextern crate sval;\n\n#[derive(Serialize, Value)]\n#[sval(derive_from = \"serde\")]\npub enum Data {\n    Variant(i32, String),\n}\n# }\n```\n\n# `std::fmt` integration\n\nUse the `fmt` Cargo feature to enable extended integration with `std::fmt`:\n\n```toml,ignore\n[dependencies.sval]\nfeatures = [\"fmt\"]\n```\n\nWhen `fmt` is available, arbitrary `Value`s can be treated like `std::fmt::Debug`:\n\n```\n# fn main() {}\n# #[cfg(feature = \"fmt\")]\n# mod test {\n# use sval::value::Value;\nfn with_value(value: impl Value) {\n    dbg!(sval::fmt::to_debug(&value));\n\n    // Do something with the value\n}\n# }\n```\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","byte_start":0,"byte_end":4077,"line_start":1,"line_end":171,"column_start":1,"column_end":3}},{"value":"no_std","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","byte_start":4141,"byte_end":4151,"line_start":174,"line_end":174,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":21},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":7663,"byte_end":7668,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":"An error encountered while visiting a value.","sig":null,"attributes":[{"value":"*\nAn error encountered while visiting a value.\n\n# Converting an `Error` into a standard error\n\nThe `Error` type doesn't implement the `std::error::Error` trait directly.\nWhen `std` is available, the `into_error` method will convert an\n`Error` into a value that implements `std::error::Error`.\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":7354,"byte_end":7651,"line_start":12,"line_end":20,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":7770,"byte_end":7773,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"msg","qualname":"<Error>::msg","value":"pub fn msg(&'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Capture a static message as an error. \n","sig":null,"attributes":[{"value":"* Capture a static message as an error. */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":7700,"byte_end":7744,"line_start":24,"line_end":24,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":7749,"byte_end":7758,"line_start":25,"line_end":25,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":7924,"byte_end":7935,"line_start":32,"line_end":32,"column_start":12,"column_end":23},"name":"unsupported","qualname":"<Error>::unsupported","value":"pub fn unsupported(&'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Declare some structure as unsupported. \n","sig":null,"attributes":[{"value":"* Declare some structure as unsupported. */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":7853,"byte_end":7898,"line_start":30,"line_end":30,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":7903,"byte_end":7912,"line_start":31,"line_end":31,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":8174,"byte_end":8188,"line_start":40,"line_end":40,"column_start":12,"column_end":26},"name":"is_unsupported","qualname":"<Error>::is_unsupported","value":"pub fn is_unsupported(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether or not an error is because some operation was unsupported. \n","sig":null,"attributes":[{"value":"* Whether or not an error is because some operation was unsupported. */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":8089,"byte_end":8162,"line_start":39,"line_end":39,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":8829,"byte_end":8843,"line_start":67,"line_end":67,"column_start":12,"column_end":26},"name":"into_fmt_error","qualname":"<Error>::into_fmt_error","value":"pub fn into_fmt_error(Self) -> fmt::Error","parent":null,"children":[],"decl_id":null,"docs":" Convert into a `fmt::Error` \n","sig":null,"attributes":[{"value":"* Convert into a `fmt::Error` */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":8769,"byte_end":8803,"line_start":65,"line_end":65,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":8808,"byte_end":8817,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":11841,"byte_end":11847,"line_start":177,"line_end":177,"column_start":16,"column_end":22},"name":"custom","qualname":"<Error>::custom","value":"pub fn custom<impl fmt::Display: fmt::Display>(impl fmt::Display) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get an error from a format. \n","sig":null,"attributes":[{"value":"* Get an error from a format. */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":11791,"byte_end":11825,"line_start":176,"line_end":176,"column_start":9,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":12184,"byte_end":12197,"line_start":196,"line_end":196,"column_start":16,"column_end":29},"name":"into_io_error","qualname":"<Error>::into_io_error","value":"pub fn into_io_error(Self) -> io::Error","parent":null,"children":[],"decl_id":null,"docs":" Convert into an io error. \n","sig":null,"attributes":[{"value":"* Convert into an io error. */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":12118,"byte_end":12150,"line_start":194,"line_end":194,"column_start":9,"column_end":41}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":12159,"byte_end":12168,"line_start":195,"line_end":195,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":278},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmt","qualname":"::fmt","value":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/mod.rs","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372}],"decl_id":null,"docs":"Integration between `sval` and `std::fmt`.","sig":null,"attributes":[{"value":"cfg(feature = \"fmt\")","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","byte_start":6231,"byte_end":6254,"line_start":296,"line_end":296,"column_start":1,"column_end":24}},{"value":"*\nIntegration between `sval` and `std::fmt`.\n\nAdd the `fmt` feature to your `Cargo.toml` to enable this module:\n\n```toml,no_run\n[dependencies.sval]\nfeatures = [\"fmt\"]\n```\n\n# From `sval` to `std::fmt`\n\nA type that implements [`Value`](../value/trait.Value.html) can be converted into\na type that implements [`std::fmt::Debug`]:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\n# impl Value for MyValue {\n#     fn stream(&self, stream: &mut value::Stream) -> value::Result {\n#         unimplemented!()\n#     }\n# }\n# let my_value = MyValue;\nlet my_debug = sval::fmt::to_debug(my_value);\n```\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/mod.rs","byte_start":24708,"byte_end":25308,"line_start":1,"line_end":27,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1146},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/to_debug.rs","byte_start":26399,"byte_end":26406,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"ToDebug","qualname":"::fmt::to_debug::ToDebug","value":"","parent":null,"children":[],"decl_id":null,"docs":"The result of calling [`sval::fmt::to_debug`](fn.to_debug.html).\n","sig":null,"attributes":[{"value":"*\nThe result of calling [`sval::fmt::to_debug`](fn.to_debug.html).\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/to_debug.rs","byte_start":26255,"byte_end":26326,"line_start":21,"line_end":23,"column_start":1,"column_end":3}}]},{"kind":"Function","id":{"krate":0,"index":370},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/mod.rs","byte_start":25694,"byte_end":25702,"line_start":50,"line_end":50,"column_start":8,"column_end":16},"name":"to_debug","qualname":"::fmt::to_debug","value":"pub fn to_debug<V>(V) -> ToDebug<V> where V: Value","parent":null,"children":[],"decl_id":null,"docs":"Convert a [`Value`] into a [`Debug`].","sig":null,"attributes":[{"value":"*\nConvert a [`Value`] into a [`Debug`].\n\nThe formatted value is not guaranteed to be exactly the same as\na `Debug` implementation that might exist on the type.\n\nThis method doesn't need to allocate or perform any buffering.\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/mod.rs","byte_start":25458,"byte_end":25686,"line_start":42,"line_end":49,"column_start":1,"column_end":3}}]},{"kind":"Function","id":{"krate":0,"index":372},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/mod.rs","byte_start":25838,"byte_end":25843,"line_start":60,"line_end":60,"column_start":8,"column_end":13},"name":"debug","qualname":"::fmt::debug","value":"pub fn debug<impl Value: Value>(&mut Formatter, impl Value) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"Format a [`Value`] using the given [`Formatter`].\n","sig":null,"attributes":[{"value":"*\nFormat a [`Value`] using the given [`Formatter`].\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/mod.rs","byte_start":25774,"byte_end":25830,"line_start":57,"line_end":59,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":374},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":419},{"krate":0,"index":460},{"krate":0,"index":618},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":743},{"krate":0,"index":746},{"krate":0,"index":749},{"krate":0,"index":769},{"krate":0,"index":790}],"decl_id":null,"docs":"A stream for datastructures.","sig":null,"attributes":[{"value":"*\nA stream for datastructures.\n\n# The `Stream` trait\n\nA [`Stream`] is a type that receives and works with abstract data-structures.\n\n## Streams without state\n\nImplement the `Stream` trait to visit the structure of a [`Value`]:\n\n```\nuse sval::stream::{self, Stream};\n\nstruct Fmt;\n\nimpl Stream for Fmt {\n    fn fmt(&mut self, v: stream::Arguments) -> stream::Result {\n        println!(\"{}\", v);\n\n        Ok(())\n    }\n\n    fn i128(&mut self, v: i128) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&v))\n    }\n\n    fn u128(&mut self, v: u128) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&v))\n    }\n\n    fn f64(&mut self, v: f64) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&v))\n    }\n\n    fn bool(&mut self, v: bool) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&v))\n    }\n\n    fn str(&mut self, v: &str) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&v))\n    }\n\n    fn none(&mut self) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&()))\n    }\n}\n```\n\nA `Stream` might only care about a single kind of value.\nThe following example overrides the provided `u64` method\nto see whether a given value is a `u64`:\n\n```\nuse sval::{\n    value::Value,\n    stream::{self, Stream, OwnedStream},\n};\n\nassert!(is_u64(42u64));\n\npub fn is_u64(v: impl Value) -> bool {\n    OwnedStream::stream(IsU64(None), v)\n        .map(|is_u64| is_u64.0.is_some())\n        .unwrap_or(false)\n}\n\nstruct IsU64(Option<u64>);\nimpl Stream for IsU64 {\n    fn u64(&mut self, v: u64) -> stream::Result {\n        self.0 = Some(v);\n\n        Ok(())\n    }\n}\n```\n\n## Streams with state\n\nThere are more methods on `Stream` that can be overriden for more complex\ndatastructures like sequences and maps. The following example uses a\n[`stream::Stack`] to track the state of any sequences and maps and ensure\nthey're valid:\n\n```\nuse std::{fmt, mem};\nuse sval::stream::{self, stack, Stream, Stack};\n\nstruct Fmt {\n    stack: stream::Stack,\n    delim: &'static str,\n}\n\nimpl Fmt {\n    fn next_delim(pos: stack::Pos) -> &'static str {\n        if pos.is_key() {\n            return \": \";\n        }\n\n        if pos.is_value() || pos.is_elem() {\n            return \", \";\n        }\n\n        return \"\";\n    }\n}\n\nimpl Stream for Fmt {\n    fn fmt(&mut self, v: stream::Arguments) -> stream::Result {\n        let pos = self.stack.primitive()?;\n\n        let delim = mem::replace(&mut self.delim, Self::next_delim(pos));\n        print!(\"{}{:?}\", delim, v);\n\n        Ok(())\n    }\n\n    fn i128(&mut self, v: i128) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&v))\n    }\n\n    fn u128(&mut self, v: u128) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&v))\n    }\n\n    fn f64(&mut self, v: f64) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&v))\n    }\n\n    fn bool(&mut self, v: bool) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&v))\n    }\n\n    fn str(&mut self, v: &str) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&v))\n    }\n\n    fn none(&mut self) -> stream::Result {\n        self.fmt(stream::Arguments::debug(&()))\n    }\n\n    fn seq_begin(&mut self, _: Option<usize>) -> stream::Result {\n        self.stack.seq_begin()?;\n\n        let delim = mem::replace(&mut self.delim, \"\");\n        print!(\"{}[\", delim);\n\n        Ok(())\n    }\n\n    fn seq_elem(&mut self) -> stream::Result {\n        self.stack.seq_elem()?;\n\n        Ok(())\n    }\n\n    fn seq_end(&mut self) -> stream::Result {\n        let pos = self.stack.seq_end()?;\n\n        self.delim = Self::next_delim(pos);\n        print!(\"]\");\n\n        Ok(())\n    }\n\n    fn map_begin(&mut self, _: Option<usize>) -> stream::Result {\n        self.stack.map_begin()?;\n\n        let delim = mem::replace(&mut self.delim, \"\");\n        print!(\"{}{{\", delim);\n\n        Ok(())\n    }\n\n    fn map_key(&mut self) -> stream::Result {\n        self.stack.map_key()?;\n\n        Ok(())\n    }\n\n    fn map_value(&mut self) -> stream::Result {\n        self.stack.map_value()?;\n\n        Ok(())\n    }\n\n    fn map_end(&mut self) -> stream::Result {\n        let pos = self.stack.map_end()?;\n\n        self.delim = Self::next_delim(pos);\n        print!(\"}}\");\n\n        Ok(())\n    }\n}\n```\n\nBy default, the `Stack` type has a fixed depth. That means deeply nested\nstructures aren't supported. See the [`stream::Stack`] type for more details.\n\n[`Value`]: ../value/trait.Value.html\n[`stream::Stack`]: stack/struct.Stack.html\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":32275,"byte_end":36727,"line_start":1,"line_end":203,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":379},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":49612,"byte_end":49618,"line_start":15,"line_end":15,"column_start":12,"column_end":18},"name":"Source","qualname":"::stream::error::Source","value":"Source {  }","parent":null,"children":[{"krate":0,"index":381}],"decl_id":null,"docs":"A streamable error.","sig":null,"attributes":[{"value":"*\nA streamable error.\n\nThis type shouldn't be confused with [`sval::Error`](../../struct.Error.html), which is\nused to communicate errors back to callers.\nThe purpose of the `Source` type is to let streams serialize\nerror types, that may have backtraces and other metadata.\n\n`Source`s can only be created when the `std` feature is available,\nbut streams can still work with them by formatting them or passing\nthem along even in no-std environments where the `Error` trait isn't available.\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":49107,"byte_end":49600,"line_start":3,"line_end":14,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51341,"byte_end":51344,"line_start":88,"line_end":88,"column_start":16,"column_end":19},"name":"new","qualname":"<Source>::new","value":"pub fn new(&'a dyn Error + 'static) -> Self","parent":null,"children":[],"decl_id":null,"docs":"        Capture an error source from a standard error.","sig":null,"attributes":[{"value":"*\n        Capture an error source from a standard error.\n\n        This method is only available when the `std` feature is enabled.\n        */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51182,"byte_end":51325,"line_start":83,"line_end":87,"column_start":9,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51495,"byte_end":51498,"line_start":95,"line_end":95,"column_start":16,"column_end":19},"name":"get","qualname":"<Source>::get","value":"pub fn get(&Self) -> &dyn Error + 'static","parent":null,"children":[],"decl_id":null,"docs":"        Get the inner error.\n","sig":null,"attributes":[{"value":"*\n        Get the inner error.\n        */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51436,"byte_end":51479,"line_start":92,"line_end":94,"column_start":9,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":423},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":52585,"byte_end":52594,"line_start":6,"line_end":6,"column_start":12,"column_end":21},"name":"Arguments","qualname":"::stream::fmt::Arguments","value":"","parent":null,"children":[],"decl_id":null,"docs":"A formattable value.\n","sig":null,"attributes":[{"value":"*\nA formattable value.\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":52546,"byte_end":52573,"line_start":3,"line_end":5,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53090,"byte_end":53093,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<Arguments>::new","value":"pub fn new(fmt::Arguments) -> Self","parent":null,"children":[],"decl_id":null,"docs":"    Capture standard format arguments.","sig":null,"attributes":[{"value":"*\n    Capture standard format arguments.\n\n    Prefer the [`debug`](#method.debug) and [`display`](#method.display) methods to create\n    `Arguments` over passing them through `format_args`,\n    because `format_args` will clobber any flags a stream\n    might want to format these arguments with.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":52775,"byte_end":53078,"line_start":15,"line_end":22,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53250,"byte_end":53255,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"debug","qualname":"<Arguments>::debug","value":"pub fn debug<impl fmt::Debug: fmt::Debug>(&'a impl fmt::Debug) -> Self","parent":null,"children":[],"decl_id":null,"docs":"    Capture arguments from a debuggable value.\n","sig":null,"attributes":[{"value":"*\n    Capture arguments from a debuggable value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53181,"byte_end":53238,"line_start":27,"line_end":29,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53415,"byte_end":53422,"line_start":37,"line_end":37,"column_start":12,"column_end":19},"name":"display","qualname":"<Arguments>::display","value":"pub fn display<impl fmt::Display: fmt::Display>(&'a impl fmt::Display) -> Self","parent":null,"children":[],"decl_id":null,"docs":"    Capture arguments from a displayable value.\n","sig":null,"attributes":[{"value":"*\n    Capture arguments from a displayable value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53345,"byte_end":53403,"line_start":34,"line_end":36,"column_start":5,"column_end":7}}]},{"kind":"Struct","id":{"krate":0,"index":492},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55059,"byte_end":55070,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"OwnedStream","qualname":"::stream::owned::OwnedStream","value":"","parent":null,"children":[],"decl_id":null,"docs":"An owned stream wrapper.","sig":null,"attributes":[{"value":"*\nAn owned stream wrapper.\n\n`OwnedStream` is an ergonomic wrapper over a raw [`Stream`] that makes it\neasier to stream complex types.\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":54909,"byte_end":55047,"line_start":21,"line_end":26,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55217,"byte_end":55223,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"stream","qualname":"<OwnedStream<S>>::stream","value":"pub fn stream<impl Value: Value>(S, impl Value) -> Result<S, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Stream a value.\n","sig":null,"attributes":[{"value":"*\n    Stream a value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55161,"byte_end":55191,"line_start":33,"line_end":35,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55196,"byte_end":55205,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55461,"byte_end":55464,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<OwnedStream<S>>::new","value":"pub fn new(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"    Begin an owned stream.\n","sig":null,"attributes":[{"value":"*\n    Begin an owned stream.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55398,"byte_end":55435,"line_start":43,"line_end":45,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55440,"byte_end":55449,"line_start":46,"line_end":46,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55627,"byte_end":55637,"line_start":55,"line_end":55,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<OwnedStream<S>>::into_inner","value":"pub fn into_inner(Self) -> S","parent":null,"children":[],"decl_id":null,"docs":"    Unwrap the inner stream.\n","sig":null,"attributes":[{"value":"*\n    Unwrap the inner stream.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55562,"byte_end":55601,"line_start":51,"line_end":53,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55606,"byte_end":55615,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55791,"byte_end":55801,"line_start":63,"line_end":63,"column_start":12,"column_end":22},"name":"borrow_mut","qualname":"<OwnedStream<S>>::borrow_mut","value":"pub fn borrow_mut(&mut Self) -> RefMutStream","parent":null,"children":[],"decl_id":null,"docs":"    Get a reference to the stream that can be used by a value.\n","sig":null,"attributes":[{"value":"*\n    Get a reference to the stream that can be used by a value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55692,"byte_end":55765,"line_start":59,"line_end":61,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55770,"byte_end":55779,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55940,"byte_end":55943,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"any","qualname":"<OwnedStream<S>>::any","value":"pub fn any<impl Value: Value>(&mut Self, impl Value) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a value.\n","sig":null,"attributes":[{"value":"*\n    Stream a value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55884,"byte_end":55914,"line_start":67,"line_end":69,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55919,"byte_end":55928,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":56089,"byte_end":56094,"line_start":79,"line_end":79,"column_start":12,"column_end":17},"name":"debug","qualname":"<OwnedStream<S>>::debug","value":"pub fn debug<impl Debug: Debug>(&mut Self, impl Debug) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a debuggable type.\n","sig":null,"attributes":[{"value":"*\n    Stream a debuggable type.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":56023,"byte_end":56063,"line_start":75,"line_end":77,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":56068,"byte_end":56077,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":56244,"byte_end":56251,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"display","qualname":"<OwnedStream<S>>::display","value":"pub fn display<impl Display: Display>(&mut Self, impl Display)\n-> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a displayable type.\n","sig":null,"attributes":[{"value":"*\n    Stream a displayable type.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":56177,"byte_end":56218,"line_start":83,"line_end":85,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":56223,"byte_end":56232,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":56999,"byte_end":57004,"line_start":118,"line_end":118,"column_start":12,"column_end":17},"name":"error","qualname":"<OwnedStream<S>>::error","value":"pub fn error(&mut Self, &dyn error::Error + 'static) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream an error.","sig":null,"attributes":[{"value":"*\n    Stream an error.\n\n    This method is only available when the `std` feature is enabled.\n\n    # Examples\n\n    Errors that don't satisfy the trait bounds needed by this method can go through [`Source`](struct.Source.html):\n\n    ```\n    # #![cfg(feature = \"std\")]\n    # use sval::value::{self, Value};\n    # struct MyError {\n    #    error: std::io::Error,\n    # }\n    impl Value for MyError {\n        fn stream(&self, stream: &mut value::Stream) -> value::Result {\n            use sval::stream::Source;\n\n            stream.any(Source::new(&self.error))\n        }\n    }\n    # fn main() {}\n    ```\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":56338,"byte_end":56945,"line_start":91,"line_end":115,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":56950,"byte_end":56959,"line_start":116,"line_end":116,"column_start":5,"column_end":14}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":56964,"byte_end":56987,"line_start":117,"line_end":117,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57170,"byte_end":57173,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"i64","qualname":"<OwnedStream<S>>::i64","value":"pub fn i64(&mut Self, i64) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a signed integer.\n","sig":null,"attributes":[{"value":"*\n    Stream a signed integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57105,"byte_end":57144,"line_start":122,"line_end":124,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57149,"byte_end":57158,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57314,"byte_end":57317,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"u64","qualname":"<OwnedStream<S>>::u64","value":"pub fn u64(&mut Self, u64) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream an unsigned integer.\n","sig":null,"attributes":[{"value":"*\n    Stream an unsigned integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57246,"byte_end":57288,"line_start":130,"line_end":132,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57293,"byte_end":57302,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57463,"byte_end":57467,"line_start":142,"line_end":142,"column_start":12,"column_end":16},"name":"i128","qualname":"<OwnedStream<S>>::i128","value":"pub fn i128(&mut Self, i128) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a 128-bit signed integer.\n","sig":null,"attributes":[{"value":"*\n    Stream a 128-bit signed integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57390,"byte_end":57437,"line_start":138,"line_end":140,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57442,"byte_end":57451,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57617,"byte_end":57621,"line_start":150,"line_end":150,"column_start":12,"column_end":16},"name":"u128","qualname":"<OwnedStream<S>>::u128","value":"pub fn u128(&mut Self, u128) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a 128-bit unsigned integer.\n","sig":null,"attributes":[{"value":"*\n    Stream a 128-bit unsigned integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57542,"byte_end":57591,"line_start":146,"line_end":148,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57596,"byte_end":57605,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57767,"byte_end":57770,"line_start":158,"line_end":158,"column_start":12,"column_end":15},"name":"f64","qualname":"<OwnedStream<S>>::f64","value":"pub fn f64(&mut Self, f64) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a floating point value.\n","sig":null,"attributes":[{"value":"*\n    Stream a floating point value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57696,"byte_end":57741,"line_start":154,"line_end":156,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57746,"byte_end":57755,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57901,"byte_end":57905,"line_start":166,"line_end":166,"column_start":12,"column_end":16},"name":"bool","qualname":"<OwnedStream<S>>::bool","value":"pub fn bool(&mut Self, bool) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a boolean.\n","sig":null,"attributes":[{"value":"*\n    Stream a boolean.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57843,"byte_end":57875,"line_start":162,"line_end":164,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57880,"byte_end":57889,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58048,"byte_end":58052,"line_start":174,"line_end":174,"column_start":12,"column_end":16},"name":"char","qualname":"<OwnedStream<S>>::char","value":"pub fn char(&mut Self, char) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a unicode character.\n","sig":null,"attributes":[{"value":"*\n    Stream a unicode character.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":57980,"byte_end":58022,"line_start":170,"line_end":172,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58027,"byte_end":58036,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58189,"byte_end":58192,"line_start":182,"line_end":182,"column_start":12,"column_end":15},"name":"str","qualname":"<OwnedStream<S>>::str","value":"pub fn str(&mut Self, &str) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a UTF8 string.\n","sig":null,"attributes":[{"value":"*\n    Stream a UTF8 string.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58127,"byte_end":58163,"line_start":178,"line_end":180,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58168,"byte_end":58177,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58329,"byte_end":58333,"line_start":190,"line_end":190,"column_start":12,"column_end":16},"name":"none","qualname":"<OwnedStream<S>>::none","value":"pub fn none(&mut Self) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream an empty value.\n","sig":null,"attributes":[{"value":"*\n    Stream an empty value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58266,"byte_end":58303,"line_start":186,"line_end":188,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58308,"byte_end":58317,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58451,"byte_end":58460,"line_start":198,"line_end":198,"column_start":12,"column_end":21},"name":"map_begin","qualname":"<OwnedStream<S>>::map_begin","value":"pub fn map_begin(&mut Self, Option<usize>) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Begin a map.\n","sig":null,"attributes":[{"value":"*\n    Begin a map.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58398,"byte_end":58425,"line_start":194,"line_end":196,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58430,"byte_end":58439,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58611,"byte_end":58618,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"map_key","qualname":"<OwnedStream<S>>::map_key","value":"pub fn map_key<impl Value: Value>(&mut Self, impl Value) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a map key.\n","sig":null,"attributes":[{"value":"*\n    Stream a map key.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58553,"byte_end":58585,"line_start":202,"line_end":204,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58590,"byte_end":58599,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58762,"byte_end":58771,"line_start":214,"line_end":214,"column_start":12,"column_end":21},"name":"map_value","qualname":"<OwnedStream<S>>::map_value","value":"pub fn map_value<impl Value: Value>(&mut Self, impl Value) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a map value.\n","sig":null,"attributes":[{"value":"*\n    Stream a map value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58702,"byte_end":58736,"line_start":210,"line_end":212,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58741,"byte_end":58750,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58908,"byte_end":58915,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"map_end","qualname":"<OwnedStream<S>>::map_end","value":"pub fn map_end(&mut Self) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    End a map.\n","sig":null,"attributes":[{"value":"*\n    End a map.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58857,"byte_end":58882,"line_start":218,"line_end":220,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58887,"byte_end":58896,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59041,"byte_end":59050,"line_start":230,"line_end":230,"column_start":12,"column_end":21},"name":"seq_begin","qualname":"<OwnedStream<S>>::seq_begin","value":"pub fn seq_begin(&mut Self, Option<usize>) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Begin a sequence.\n","sig":null,"attributes":[{"value":"*\n    Begin a sequence.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":58983,"byte_end":59015,"line_start":226,"line_end":228,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59020,"byte_end":59029,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59210,"byte_end":59218,"line_start":238,"line_end":238,"column_start":12,"column_end":20},"name":"seq_elem","qualname":"<OwnedStream<S>>::seq_elem","value":"pub fn seq_elem<impl Value: Value>(&mut Self, impl Value) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a sequence element.\n","sig":null,"attributes":[{"value":"*\n    Stream a sequence element.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59143,"byte_end":59184,"line_start":234,"line_end":236,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59189,"byte_end":59198,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59359,"byte_end":59366,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"seq_end","qualname":"<OwnedStream<S>>::seq_end","value":"pub fn seq_end(&mut Self) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    End a sequence.\n","sig":null,"attributes":[{"value":"*\n    End a sequence.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59303,"byte_end":59333,"line_start":242,"line_end":244,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59338,"byte_end":59347,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59539,"byte_end":59552,"line_start":259,"line_end":259,"column_start":12,"column_end":25},"name":"map_key_begin","qualname":"<OwnedStream<S>>::map_key_begin","value":"pub fn map_key_begin(&mut Self) -> Result<&mut Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Begin a map key.\n","sig":null,"attributes":[{"value":"*\n    Begin a map key.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59482,"byte_end":59513,"line_start":255,"line_end":257,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59518,"byte_end":59527,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59722,"byte_end":59737,"line_start":269,"line_end":269,"column_start":12,"column_end":27},"name":"map_value_begin","qualname":"<OwnedStream<S>>::map_value_begin","value":"pub fn map_value_begin(&mut Self) -> Result<&mut Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Begin a map value.\n","sig":null,"attributes":[{"value":"*\n    Begin a map value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59663,"byte_end":59696,"line_start":265,"line_end":267,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59701,"byte_end":59710,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59916,"byte_end":59930,"line_start":279,"line_end":279,"column_start":12,"column_end":26},"name":"seq_elem_begin","qualname":"<OwnedStream<S>>::seq_elem_begin","value":"pub fn seq_elem_begin(&mut Self) -> Result<&mut Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Begin a sequence element.\n","sig":null,"attributes":[{"value":"*\n    Begin a sequence element.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59850,"byte_end":59890,"line_start":275,"line_end":277,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59895,"byte_end":59904,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":557},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":61979,"byte_end":61991,"line_start":386,"line_end":386,"column_start":12,"column_end":24},"name":"RefMutStream","qualname":"::stream::owned::RefMutStream","value":"","parent":null,"children":[],"decl_id":null,"docs":"A borrowed stream wrapper.","sig":null,"attributes":[{"value":"*\nA borrowed stream wrapper.\n\nThis is the result of calling `OwnedStream.borrow_mut`.\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":61877,"byte_end":61967,"line_start":381,"line_end":385,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62216,"byte_end":62219,"line_start":398,"line_end":398,"column_start":12,"column_end":15},"name":"any","qualname":"<RefMutStream>::any","value":"pub fn any<impl Value: Value>(&mut Self, impl Value) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a value.\n","sig":null,"attributes":[{"value":"*\n    Stream a value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62160,"byte_end":62190,"line_start":394,"line_end":396,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62195,"byte_end":62204,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62365,"byte_end":62370,"line_start":406,"line_end":406,"column_start":12,"column_end":17},"name":"debug","qualname":"<RefMutStream>::debug","value":"pub fn debug<impl Debug: Debug>(&mut Self, impl Debug) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a debuggable type.\n","sig":null,"attributes":[{"value":"*\n    Stream a debuggable type.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62299,"byte_end":62339,"line_start":402,"line_end":404,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62344,"byte_end":62353,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62519,"byte_end":62526,"line_start":414,"line_end":414,"column_start":12,"column_end":19},"name":"display","qualname":"<RefMutStream>::display","value":"pub fn display<impl Display: Display>(&mut Self, impl Display)\n-> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a displayable type.\n","sig":null,"attributes":[{"value":"*\n    Stream a displayable type.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62452,"byte_end":62493,"line_start":410,"line_end":412,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62498,"byte_end":62507,"line_start":413,"line_end":413,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63273,"byte_end":63278,"line_start":445,"line_end":445,"column_start":12,"column_end":17},"name":"error","qualname":"<RefMutStream>::error","value":"pub fn error(&mut Self, &dyn error::Error + 'static) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream an error.","sig":null,"attributes":[{"value":"*\n    Stream an error.\n\n    This method is only available when the `std` feature is enabled.\n\n    # Examples\n\n    Errors that don't satisfy the trait bounds needed by this method can go through [`Source`](struct.Source.html):\n\n    ```\n    # #![cfg(feature = \"std\")]\n    # use sval::value::{self, Value};\n    # struct MyError {\n    #    error: std::io::Error,\n    # }\n    impl Value for MyError {\n        fn stream(&self, stream: &mut value::Stream) -> value::Result {\n            use sval::stream::Source;\n\n            stream.any(Source::new(&self.error))\n        }\n    }\n    # fn main() {}\n    ```\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62612,"byte_end":63219,"line_start":418,"line_end":442,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63224,"byte_end":63233,"line_start":443,"line_end":443,"column_start":5,"column_end":14}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63238,"byte_end":63261,"line_start":444,"line_end":444,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63444,"byte_end":63447,"line_start":453,"line_end":453,"column_start":12,"column_end":15},"name":"i64","qualname":"<RefMutStream>::i64","value":"pub fn i64(&mut Self, i64) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a signed integer.\n","sig":null,"attributes":[{"value":"*\n    Stream a signed integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63379,"byte_end":63418,"line_start":449,"line_end":451,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63423,"byte_end":63432,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63588,"byte_end":63591,"line_start":461,"line_end":461,"column_start":12,"column_end":15},"name":"u64","qualname":"<RefMutStream>::u64","value":"pub fn u64(&mut Self, u64) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream an unsigned integer.\n","sig":null,"attributes":[{"value":"*\n    Stream an unsigned integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63520,"byte_end":63562,"line_start":457,"line_end":459,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63567,"byte_end":63576,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63737,"byte_end":63741,"line_start":469,"line_end":469,"column_start":12,"column_end":16},"name":"i128","qualname":"<RefMutStream>::i128","value":"pub fn i128(&mut Self, i128) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a 128-bit signed integer.\n","sig":null,"attributes":[{"value":"*\n    Stream a 128-bit signed integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63664,"byte_end":63711,"line_start":465,"line_end":467,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63716,"byte_end":63725,"line_start":468,"line_end":468,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63891,"byte_end":63895,"line_start":477,"line_end":477,"column_start":12,"column_end":16},"name":"u128","qualname":"<RefMutStream>::u128","value":"pub fn u128(&mut Self, u128) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a 128-bit unsigned integer.\n","sig":null,"attributes":[{"value":"*\n    Stream a 128-bit unsigned integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63816,"byte_end":63865,"line_start":473,"line_end":475,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63870,"byte_end":63879,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64041,"byte_end":64044,"line_start":485,"line_end":485,"column_start":12,"column_end":15},"name":"f64","qualname":"<RefMutStream>::f64","value":"pub fn f64(&mut Self, f64) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a floating point value.\n","sig":null,"attributes":[{"value":"*\n    Stream a floating point value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":63970,"byte_end":64015,"line_start":481,"line_end":483,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64020,"byte_end":64029,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64175,"byte_end":64179,"line_start":493,"line_end":493,"column_start":12,"column_end":16},"name":"bool","qualname":"<RefMutStream>::bool","value":"pub fn bool(&mut Self, bool) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a boolean.\n","sig":null,"attributes":[{"value":"*\n    Stream a boolean.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64117,"byte_end":64149,"line_start":489,"line_end":491,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64154,"byte_end":64163,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64322,"byte_end":64326,"line_start":501,"line_end":501,"column_start":12,"column_end":16},"name":"char","qualname":"<RefMutStream>::char","value":"pub fn char(&mut Self, char) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a unicode character.\n","sig":null,"attributes":[{"value":"*\n    Stream a unicode character.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64254,"byte_end":64296,"line_start":497,"line_end":499,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64301,"byte_end":64310,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64463,"byte_end":64466,"line_start":509,"line_end":509,"column_start":12,"column_end":15},"name":"str","qualname":"<RefMutStream>::str","value":"pub fn str(&mut Self, &str) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a UTF8 string.\n","sig":null,"attributes":[{"value":"*\n    Stream a UTF8 string.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64401,"byte_end":64437,"line_start":505,"line_end":507,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64442,"byte_end":64451,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64603,"byte_end":64607,"line_start":517,"line_end":517,"column_start":12,"column_end":16},"name":"none","qualname":"<RefMutStream>::none","value":"pub fn none(&mut Self) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream an empty value.\n","sig":null,"attributes":[{"value":"*\n    Stream an empty value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64540,"byte_end":64577,"line_start":513,"line_end":515,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64582,"byte_end":64591,"line_start":516,"line_end":516,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64725,"byte_end":64734,"line_start":525,"line_end":525,"column_start":12,"column_end":21},"name":"map_begin","qualname":"<RefMutStream>::map_begin","value":"pub fn map_begin(&mut Self, Option<usize>) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Begin a map.\n","sig":null,"attributes":[{"value":"*\n    Begin a map.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64672,"byte_end":64699,"line_start":521,"line_end":523,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64704,"byte_end":64713,"line_start":524,"line_end":524,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64885,"byte_end":64892,"line_start":533,"line_end":533,"column_start":12,"column_end":19},"name":"map_key","qualname":"<RefMutStream>::map_key","value":"pub fn map_key<impl Value: Value>(&mut Self, impl Value) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a map key.\n","sig":null,"attributes":[{"value":"*\n    Stream a map key.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64827,"byte_end":64859,"line_start":529,"line_end":531,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64864,"byte_end":64873,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65036,"byte_end":65045,"line_start":541,"line_end":541,"column_start":12,"column_end":21},"name":"map_value","qualname":"<RefMutStream>::map_value","value":"pub fn map_value<impl Value: Value>(&mut Self, impl Value) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a map value.\n","sig":null,"attributes":[{"value":"*\n    Stream a map value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":64976,"byte_end":65010,"line_start":537,"line_end":539,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65015,"byte_end":65024,"line_start":540,"line_end":540,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65182,"byte_end":65189,"line_start":549,"line_end":549,"column_start":12,"column_end":19},"name":"map_end","qualname":"<RefMutStream>::map_end","value":"pub fn map_end(&mut Self) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    End a map.\n","sig":null,"attributes":[{"value":"*\n    End a map.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65131,"byte_end":65156,"line_start":545,"line_end":547,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65161,"byte_end":65170,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65315,"byte_end":65324,"line_start":557,"line_end":557,"column_start":12,"column_end":21},"name":"seq_begin","qualname":"<RefMutStream>::seq_begin","value":"pub fn seq_begin(&mut Self, Option<usize>) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Begin a sequence.\n","sig":null,"attributes":[{"value":"*\n    Begin a sequence.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65257,"byte_end":65289,"line_start":553,"line_end":555,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65294,"byte_end":65303,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65484,"byte_end":65492,"line_start":565,"line_end":565,"column_start":12,"column_end":20},"name":"seq_elem","qualname":"<RefMutStream>::seq_elem","value":"pub fn seq_elem<impl Value: Value>(&mut Self, impl Value) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    Stream a sequence element.\n","sig":null,"attributes":[{"value":"*\n    Stream a sequence element.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65417,"byte_end":65458,"line_start":561,"line_end":563,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65463,"byte_end":65472,"line_start":564,"line_end":564,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65633,"byte_end":65640,"line_start":573,"line_end":573,"column_start":12,"column_end":19},"name":"seq_end","qualname":"<RefMutStream>::seq_end","value":"pub fn seq_end(&mut Self) -> stream::Result","parent":null,"children":[],"decl_id":null,"docs":"    End a sequence.\n","sig":null,"attributes":[{"value":"*\n    End a sequence.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65577,"byte_end":65607,"line_start":569,"line_end":571,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65612,"byte_end":65621,"line_start":572,"line_end":572,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65795,"byte_end":65808,"line_start":583,"line_end":583,"column_start":12,"column_end":25},"name":"map_key_begin","qualname":"<RefMutStream>::map_key_begin","value":"pub fn map_key_begin(&mut Self) -> Result<&mut Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Begin a map key.\n","sig":null,"attributes":[{"value":"*\n    Begin a map key.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65738,"byte_end":65769,"line_start":579,"line_end":581,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65774,"byte_end":65783,"line_start":582,"line_end":582,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65978,"byte_end":65993,"line_start":593,"line_end":593,"column_start":12,"column_end":27},"name":"map_value_begin","qualname":"<RefMutStream>::map_value_begin","value":"pub fn map_value_begin(&mut Self) -> Result<&mut Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Begin a map value.\n","sig":null,"attributes":[{"value":"*\n    Begin a map value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65919,"byte_end":65952,"line_start":589,"line_end":591,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65957,"byte_end":65966,"line_start":592,"line_end":592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":66172,"byte_end":66186,"line_start":603,"line_end":603,"column_start":12,"column_end":26},"name":"seq_elem_begin","qualname":"<RefMutStream>::seq_elem_begin","value":"pub fn seq_elem_begin(&mut Self) -> Result<&mut Self, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Begin a sequence element.\n","sig":null,"attributes":[{"value":"*\n    Begin a sequence element.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":66106,"byte_end":66146,"line_start":599,"line_end":601,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":66151,"byte_end":66160,"line_start":602,"line_end":602,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":618},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stack","qualname":"::stream::stack","value":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":1176},{"krate":0,"index":1179},{"krate":0,"index":1181},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1193},{"krate":0,"index":1195},{"krate":0,"index":630},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":1197},{"krate":0,"index":1199},{"krate":0,"index":1201},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":643},{"krate":0,"index":663},{"krate":0,"index":665},{"krate":0,"index":679},{"krate":0,"index":716}],"decl_id":null,"docs":"A fixed-size, stateful stack for streams.\n","sig":null,"attributes":[{"value":"*\nA fixed-size, stateful stack for streams.\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":70509,"byte_end":70557,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1176},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71001,"byte_end":71004,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"Pos","qualname":"::stream::stack::Pos","value":"Pos {  }","parent":null,"children":[{"krate":0,"index":1177},{"krate":0,"index":1178}],"decl_id":null,"docs":"The expected position in the stream.\n","sig":null,"attributes":[{"value":"*\nThe expected position in the stream.\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":70929,"byte_end":70972,"line_start":25,"line_end":27,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1181},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71224,"byte_end":71229,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"Depth","qualname":"::stream::stack::Depth","value":"","parent":null,"children":[],"decl_id":null,"docs":"The depth of a position.","sig":null,"attributes":[{"value":"*\nThe depth of a position.\n\nAll positions within a map or sequence are guaranteed\nto have the same depth or greater.\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71042,"byte_end":71163,"line_start":34,"line_end":39,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71471,"byte_end":71477,"line_start":55,"line_end":55,"column_start":12,"column_end":18},"name":"is_key","qualname":"<Pos>::is_key","value":"pub fn is_key(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"    Whether the current position is a map key.\n","sig":null,"attributes":[{"value":"*\n    Whether the current position is a map key.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71388,"byte_end":71445,"line_start":51,"line_end":53,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71450,"byte_end":71459,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71639,"byte_end":71647,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_value","qualname":"<Pos>::is_value","value":"pub fn is_value(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"    Whether the current position is a map value.\n","sig":null,"attributes":[{"value":"*\n    Whether the current position is a map value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71554,"byte_end":71613,"line_start":59,"line_end":61,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71618,"byte_end":71627,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71816,"byte_end":71823,"line_start":71,"line_end":71,"column_start":12,"column_end":19},"name":"is_elem","qualname":"<Pos>::is_elem","value":"pub fn is_elem(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"    Whether the current position is a sequence element.\n","sig":null,"attributes":[{"value":"*\n    Whether the current position is a sequence element.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71724,"byte_end":71790,"line_start":67,"line_end":69,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71795,"byte_end":71804,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71987,"byte_end":71999,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"is_empty_map","qualname":"<Pos>::is_empty_map","value":"pub fn is_empty_map(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"    Whether the current position is an empty map.\n","sig":null,"attributes":[{"value":"*\n    Whether the current position is an empty map.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71901,"byte_end":71961,"line_start":75,"line_end":77,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71966,"byte_end":71975,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":72155,"byte_end":72167,"line_start":87,"line_end":87,"column_start":12,"column_end":24},"name":"is_empty_seq","qualname":"<Pos>::is_empty_seq","value":"pub fn is_empty_seq(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"    Whether the current position is an empty sequence.\n","sig":null,"attributes":[{"value":"*\n    Whether the current position is an empty sequence.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":72064,"byte_end":72129,"line_start":83,"line_end":85,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":72134,"byte_end":72143,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":72300,"byte_end":72305,"line_start":95,"line_end":95,"column_start":12,"column_end":17},"name":"depth","qualname":"<Pos>::depth","value":"pub fn depth(&Self) -> Depth","parent":null,"children":[],"decl_id":null,"docs":"    The depth of this position.\n","sig":null,"attributes":[{"value":"*\n    The depth of this position.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":72232,"byte_end":72274,"line_start":91,"line_end":93,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":72279,"byte_end":72288,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1197},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":75107,"byte_end":75112,"line_start":182,"line_end":182,"column_start":12,"column_end":17},"name":"Stack","qualname":"::stream::stack::Stack","value":"Stack {  }","parent":null,"children":[{"krate":0,"index":1198}],"decl_id":null,"docs":"A container for the stream state.","sig":null,"attributes":[{"value":"*\nA container for the stream state.\n\nImplementations of the [`Stream`](../trait.Stream.html) trait are encouraged to use a\nstack for validating their input.\n\nThe stack is stateful, and keeps track of open maps and sequences.\n\n# Validation\n\nA stack uses its state to validate the structure given to a stream and\nas a way for a flat, stateless stream to know what it's currently\nlooking at. The stack enforces:\n\n- Only a single root primitive, map or sequence is received.\n- Map keys and values are only received within a map.\n- Map keys are always received before map values, and every key has a corresponding value.\n- Sequence elements are only received within a sequence.\n- Every map and sequence is ended, and in the right order.\n- Every map key, map value, and sequence element is followed by valid data.\n\n# Depth\n\nBy default, stacks have a fixed depth (currently ~16, but this may change) so they can\nwork in no-std environments. Each call to `map_begin` or `seq_begin` will increase the\ncurrent depth. If this depth is exceeded then calls to `map_begin` or `seq_begin` will fail.\n\nThe fixed-depth limit can be removed by adding the `arbitrary-depth` feature to your `Cargo.toml`\n(this also requires the standard library):\n\n```toml,no_run\n[dependencies.sval]\nfeatures = [\"arbitrary-depth\"]\n```\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":73776,"byte_end":75078,"line_start":146,"line_end":180,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76323,"byte_end":76326,"line_start":242,"line_end":242,"column_start":12,"column_end":15},"name":"new","qualname":"<Stack>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"    Create a new stack.\n","sig":null,"attributes":[{"value":"*\n    Create a new stack.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76263,"byte_end":76297,"line_start":238,"line_end":240,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76302,"byte_end":76311,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76550,"byte_end":76555,"line_start":254,"line_end":254,"column_start":12,"column_end":17},"name":"clear","qualname":"<Stack>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":"    Clear the stack so that it can be re-used.","sig":null,"attributes":[{"value":"*\n    Clear the stack so that it can be re-used.\n\n    Any state it currently contains will be lost.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76416,"byte_end":76524,"line_start":248,"line_end":252,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76529,"byte_end":76538,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76687,"byte_end":76694,"line_start":262,"line_end":262,"column_start":12,"column_end":19},"name":"current","qualname":"<Stack>::current","value":"pub fn current(&Self) -> Pos","parent":null,"children":[],"decl_id":null,"docs":"    Get the current position in the stack.\n","sig":null,"attributes":[{"value":"*\n    Get the current position in the stack.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76608,"byte_end":76661,"line_start":258,"line_end":260,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76666,"byte_end":76675,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":77061,"byte_end":77070,"line_start":280,"line_end":280,"column_start":12,"column_end":21},"name":"primitive","qualname":"<Stack>::primitive","value":"pub fn primitive(&mut Self) -> Result<Pos, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Push a primitive.","sig":null,"attributes":[{"value":"*\n    Push a primitive.\n\n    A primitive is a simple value that isn't a map or sequence.\n    That includes:\n\n    - [`Arguments`](struct.Arguments.html)\n    - `u64`, `i64`, `u128`, `i128`\n    - `f64`\n    - `bool`\n    - `char`, `&str`\n    - `Option<T>`.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76775,"byte_end":77035,"line_start":266,"line_end":278,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":77040,"byte_end":77049,"line_start":279,"line_end":279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":77597,"byte_end":77606,"line_start":302,"line_end":302,"column_start":12,"column_end":21},"name":"map_begin","qualname":"<Stack>::map_begin","value":"pub fn map_begin(&mut Self) -> Result<Pos, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Begin a new map.","sig":null,"attributes":[{"value":"*\n    Begin a new map.\n\n    The map must be completed by calling `map_end`.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":77487,"byte_end":77571,"line_start":296,"line_end":300,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":77576,"byte_end":77585,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":78369,"byte_end":78376,"line_start":330,"line_end":330,"column_start":12,"column_end":19},"name":"map_key","qualname":"<Stack>::map_key","value":"pub fn map_key(&mut Self) -> Result<Pos, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Begin a map key.","sig":null,"attributes":[{"value":"*\n    Begin a map key.\n\n    The key will be implicitly completed by the value\n    that follows it.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":78236,"byte_end":78343,"line_start":323,"line_end":328,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":78348,"byte_end":78357,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":79010,"byte_end":79019,"line_start":354,"line_end":354,"column_start":12,"column_end":21},"name":"map_value","qualname":"<Stack>::map_value","value":"pub fn map_value(&mut Self) -> Result<Pos, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Begin a map value.","sig":null,"attributes":[{"value":"*\n    Begin a map value.\n\n    The value will be implicitly completed by the value\n    that follows it.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":78873,"byte_end":78984,"line_start":347,"line_end":352,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":78989,"byte_end":78998,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":79511,"byte_end":79518,"line_start":374,"line_end":374,"column_start":12,"column_end":19},"name":"map_end","qualname":"<Stack>::map_end","value":"pub fn map_end(&mut Self) -> Result<Pos, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Complete the current map.\n","sig":null,"attributes":[{"value":"*\n    Complete the current map.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":79445,"byte_end":79485,"line_start":370,"line_end":372,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":79490,"byte_end":79499,"line_start":373,"line_end":373,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":80408,"byte_end":80417,"line_start":405,"line_end":405,"column_start":12,"column_end":21},"name":"seq_begin","qualname":"<Stack>::seq_begin","value":"pub fn seq_begin(&mut Self) -> Result<Pos, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Begin a new sequence.","sig":null,"attributes":[{"value":"*\n    Begin a new sequence.\n\n    the sequence must be completed by calling `seq_end`.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":80288,"byte_end":80382,"line_start":399,"line_end":403,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":80387,"byte_end":80396,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":81193,"byte_end":81201,"line_start":433,"line_end":433,"column_start":12,"column_end":20},"name":"seq_elem","qualname":"<Stack>::seq_elem","value":"pub fn seq_elem(&mut Self) -> Result<Pos, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Begin a sequence element.","sig":null,"attributes":[{"value":"*\n    Begin a sequence element.\n\n    The element will be implicitly completed by the value\n    that follows it.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":81047,"byte_end":81167,"line_start":426,"line_end":431,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":81172,"byte_end":81181,"line_start":432,"line_end":432,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":81779,"byte_end":81786,"line_start":454,"line_end":454,"column_start":12,"column_end":19},"name":"seq_end","qualname":"<Stack>::seq_end","value":"pub fn seq_end(&mut Self) -> Result<Pos, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Complete the current sequence.\n","sig":null,"attributes":[{"value":"*\n    Complete the current sequence.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":81708,"byte_end":81753,"line_start":450,"line_end":452,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":81758,"byte_end":81767,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":82672,"byte_end":82679,"line_start":483,"line_end":483,"column_start":12,"column_end":19},"name":"can_end","qualname":"<Stack>::can_end","value":"pub fn can_end(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"    Whether or not the stack has seen a complete and valid stream.\n","sig":null,"attributes":[{"value":"*\n    Whether or not the stack has seen a complete and valid stream.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":82569,"byte_end":82646,"line_start":479,"line_end":481,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":82651,"byte_end":82660,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":82877,"byte_end":82880,"line_start":494,"line_end":494,"column_start":12,"column_end":15},"name":"end","qualname":"<Stack>::end","value":"pub fn end(&mut Self) -> Result<(), crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"    Complete the stack.","sig":null,"attributes":[{"value":"*\n    Complete the stack.\n\n    This stack may be re-used after being completed\n    by calling `begin`.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":82740,"byte_end":82851,"line_start":487,"line_end":492,"column_start":5,"column_end":7}},{"value":"inline","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":82856,"byte_end":82865,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":749},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":41652,"byte_end":41658,"line_start":515,"line_end":515,"column_start":11,"column_end":17},"name":"Stream","qualname":"::stream::Stream","value":"Stream","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768}],"decl_id":null,"docs":"A receiver for the structure of a value.","sig":null,"attributes":[{"value":"*\nA receiver for the structure of a value.\n\nThe `Stream` trait has a flat, stateless structure, but it may need to work with\nnested values. Implementations can use a [`Stack`] to track state for them.\n\nThe [`OwnedStream`] type is an ergonomic wrapper over a raw `Stream` that adds\nthe concept of [`Value`](../value/trait.Value.html)s.\n\n# Implementing `Stream`\n\nA stream may choose what kinds of structures it supports by selectively\nimplementing methods on the trait. Other methods default to returning\n[`Error::unsupported`]. Implementations may also choose to return\n`Error::unsupported` for other reasons.\n\n## Supporting primitives\n\nThe following stream can support any primitive value:\n\n```\n# struct MyStream;\nuse sval::stream::{self, Stream};\n\nimpl Stream for MyStream {\n    fn fmt(&mut self, args: stream::Arguments) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn i128(&mut self, v: i128) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn u128(&mut self, v: u128) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn f64(&mut self, v: f64) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn bool(&mut self, v: bool) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn str(&mut self, v: &str) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn none(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n}\n```\n\n## Supporting maps\n\nIn addition to the [methods needed for streaming primitives](#supporting-primitives),\na stream that supports maps needs to implement a few additional methods:\n\n```\n# struct MyStream;\nuse sval::stream::{self, Stream};\n\nimpl Stream for MyStream {\n    fn map_begin(&mut self, len: Option<usize>) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn map_key(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn map_value(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn map_end(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n}\n```\n\n## Supporting sequences\n\nIn addition to the [methods needed for streaming primitives](#supporting-primitives),\na stream that supports sequences needs to implement a few additional methods:\n\n```\n# struct MyStream;\nuse sval::stream::{self, Stream};\n\nimpl Stream for MyStream {\n    fn seq_begin(&mut self, len: Option<usize>) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn seq_elem(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn seq_end(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n}\n```\n\n## Supporting all structure\n\n```\n# struct MyStream;\nuse sval::stream::{self, Stream};\n\nimpl Stream for MyStream {\n    fn fmt(&mut self, args: stream::Arguments) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn error(&mut self, source: stream::Source) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn i128(&mut self, v: i128) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn u128(&mut self, v: u128) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn f64(&mut self, v: f64) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn bool(&mut self, v: bool) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn str(&mut self, v: &str) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn none(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn map_begin(&mut self, len: Option<usize>) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn map_key(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn map_value(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn map_end(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn seq_begin(&mut self, len: Option<usize>) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn seq_elem(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n\n    fn seq_end(&mut self) -> stream::Result {\n#       /*\n        ..\n#       */\n\n        Ok(())\n    }\n}\n```\n\n[`Value`]: ../trait.Value.html\n[`Error::unsupported`]: struct.Error.html#method.unsupported\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":36927,"byte_end":41641,"line_start":220,"line_end":514,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":41735,"byte_end":41738,"line_start":520,"line_end":520,"column_start":8,"column_end":11},"name":"fmt","qualname":"::stream::Stream::fmt","value":"pub fn fmt(&mut Self, Arguments) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Stream a debuggable type.\n","sig":null,"attributes":[{"value":"*\n    Stream a debuggable type.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":41665,"byte_end":41705,"line_start":516,"line_end":518,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":41710,"byte_end":41727,"line_start":519,"line_end":519,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":41993,"byte_end":41998,"line_start":531,"line_end":531,"column_start":8,"column_end":13},"name":"error","qualname":"::stream::Stream::error","value":"pub fn error(&mut Self, Source) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Stream an error.\n","sig":null,"attributes":[{"value":"*\n    Stream an error.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":41932,"byte_end":41963,"line_start":527,"line_end":529,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":41968,"byte_end":41985,"line_start":530,"line_end":530,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42259,"byte_end":42262,"line_start":542,"line_end":542,"column_start":8,"column_end":11},"name":"i64","qualname":"::stream::Stream::i64","value":"pub fn i64(&mut Self, i64) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Stream a signed integer.\n","sig":null,"attributes":[{"value":"*\n    Stream a signed integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42190,"byte_end":42229,"line_start":538,"line_end":540,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42234,"byte_end":42251,"line_start":541,"line_end":541,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42464,"byte_end":42467,"line_start":552,"line_end":552,"column_start":8,"column_end":11},"name":"u64","qualname":"::stream::Stream::u64","value":"pub fn u64(&mut Self, u64) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Stream an unsigned integer.\n","sig":null,"attributes":[{"value":"*\n    Stream an unsigned integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42392,"byte_end":42434,"line_start":548,"line_end":550,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42439,"byte_end":42456,"line_start":551,"line_end":551,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42673,"byte_end":42677,"line_start":562,"line_end":562,"column_start":8,"column_end":12},"name":"i128","qualname":"::stream::Stream::i128","value":"pub fn i128(&mut Self, i128) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Stream a 128bit signed integer.\n","sig":null,"attributes":[{"value":"*\n    Stream a 128bit signed integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42597,"byte_end":42643,"line_start":558,"line_end":560,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42648,"byte_end":42665,"line_start":561,"line_end":561,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42941,"byte_end":42945,"line_start":573,"line_end":573,"column_start":8,"column_end":12},"name":"u128","qualname":"::stream::Stream::u128","value":"pub fn u128(&mut Self, u128) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Stream a 128bit unsigned integer.\n","sig":null,"attributes":[{"value":"*\n    Stream a 128bit unsigned integer.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42863,"byte_end":42911,"line_start":569,"line_end":571,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":42916,"byte_end":42933,"line_start":572,"line_end":572,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43206,"byte_end":43209,"line_start":584,"line_end":584,"column_start":8,"column_end":11},"name":"f64","qualname":"::stream::Stream::f64","value":"pub fn f64(&mut Self, f64) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Stream a floating point value.\n","sig":null,"attributes":[{"value":"*\n    Stream a floating point value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43131,"byte_end":43176,"line_start":580,"line_end":582,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43181,"byte_end":43198,"line_start":583,"line_end":583,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43453,"byte_end":43457,"line_start":595,"line_end":595,"column_start":8,"column_end":12},"name":"bool","qualname":"::stream::Stream::bool","value":"pub fn bool(&mut Self, bool) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Stream a boolean.\n","sig":null,"attributes":[{"value":"*\n    Stream a boolean.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43391,"byte_end":43423,"line_start":591,"line_end":593,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43428,"byte_end":43445,"line_start":594,"line_end":594,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43715,"byte_end":43719,"line_start":606,"line_end":606,"column_start":8,"column_end":12},"name":"char","qualname":"::stream::Stream::char","value":"pub fn char(&mut Self, char) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Stream a unicode character.\n","sig":null,"attributes":[{"value":"*\n    Stream a unicode character.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43643,"byte_end":43685,"line_start":602,"line_end":604,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43690,"byte_end":43707,"line_start":605,"line_end":605,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43966,"byte_end":43969,"line_start":617,"line_end":617,"column_start":8,"column_end":11},"name":"str","qualname":"::stream::Stream::str","value":"pub fn str(&mut Self, &str) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Stream a UTF-8 string slice.\n","sig":null,"attributes":[{"value":"*\n    Stream a UTF-8 string slice.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43893,"byte_end":43936,"line_start":613,"line_end":615,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":43941,"byte_end":43958,"line_start":616,"line_end":616,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":44220,"byte_end":44224,"line_start":628,"line_end":628,"column_start":8,"column_end":12},"name":"none","qualname":"::stream::Stream::none","value":"pub fn none(&mut Self) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Stream an empty value.\n","sig":null,"attributes":[{"value":"*\n    Stream an empty value.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":44153,"byte_end":44190,"line_start":624,"line_end":626,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":44195,"byte_end":44212,"line_start":627,"line_end":627,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":44430,"byte_end":44439,"line_start":638,"line_end":638,"column_start":8,"column_end":17},"name":"map_begin","qualname":"::stream::Stream::map_begin","value":"pub fn map_begin(&mut Self, Option<usize>) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Begin a map.\n","sig":null,"attributes":[{"value":"*\n    Begin a map.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":44373,"byte_end":44400,"line_start":634,"line_end":636,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":44405,"byte_end":44422,"line_start":637,"line_end":637,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":44796,"byte_end":44803,"line_start":651,"line_end":651,"column_start":8,"column_end":15},"name":"map_key","qualname":"::stream::Stream::map_key","value":"pub fn map_key(&mut Self) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Begin a map key.","sig":null,"attributes":[{"value":"*\n    Begin a map key.\n\n    The key will be implicitly ended by the stream methods that follow it.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":44659,"byte_end":44766,"line_start":645,"line_end":649,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":44771,"byte_end":44788,"line_start":650,"line_end":650,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":45099,"byte_end":45108,"line_start":663,"line_end":663,"column_start":8,"column_end":17},"name":"map_value","qualname":"::stream::Stream::map_value","value":"pub fn map_value(&mut Self) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Begin a map value.","sig":null,"attributes":[{"value":"*\n    Begin a map value.\n\n    The value will be implicitly ended by the stream methods that follow it.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":44958,"byte_end":45069,"line_start":657,"line_end":661,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":45074,"byte_end":45091,"line_start":662,"line_end":662,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":45322,"byte_end":45329,"line_start":673,"line_end":673,"column_start":8,"column_end":15},"name":"map_end","qualname":"::stream::Stream::map_end","value":"pub fn map_end(&mut Self) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    End a map.\n","sig":null,"attributes":[{"value":"*\n    End a map.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":45267,"byte_end":45292,"line_start":669,"line_end":671,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":45297,"byte_end":45314,"line_start":672,"line_end":672,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":45546,"byte_end":45555,"line_start":683,"line_end":683,"column_start":8,"column_end":17},"name":"seq_begin","qualname":"::stream::Stream::seq_begin","value":"pub fn seq_begin(&mut Self, Option<usize>) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Begin a sequence.\n","sig":null,"attributes":[{"value":"*\n    Begin a sequence.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":45484,"byte_end":45516,"line_start":679,"line_end":681,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":45521,"byte_end":45538,"line_start":682,"line_end":682,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":45925,"byte_end":45933,"line_start":696,"line_end":696,"column_start":8,"column_end":16},"name":"seq_elem","qualname":"::stream::Stream::seq_elem","value":"pub fn seq_elem(&mut Self) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    Begin a sequence element.","sig":null,"attributes":[{"value":"*\n    Begin a sequence element.\n\n    The element will be implicitly ended by the stream methods that follow it.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":45775,"byte_end":45895,"line_start":690,"line_end":694,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":45900,"byte_end":45917,"line_start":695,"line_end":695,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":46150,"byte_end":46157,"line_start":706,"line_end":706,"column_start":8,"column_end":15},"name":"seq_end","qualname":"::stream::Stream::seq_end","value":"pub fn seq_end(&mut Self) -> Result","parent":{"krate":0,"index":749},"children":[],"decl_id":null,"docs":"    End a sequence.\n","sig":null,"attributes":[{"value":"*\n    End a sequence.\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":46090,"byte_end":46120,"line_start":702,"line_end":704,"column_start":5,"column_end":7}},{"value":"cfg(not(test))","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":46125,"byte_end":46142,"line_start":705,"line_end":705,"column_start":5,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":790},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":48070,"byte_end":48076,"line_start":811,"line_end":811,"column_start":10,"column_end":16},"name":"Result","qualname":"::stream::Result","value":"crate::std::result::Result<(), crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"The type returned by streaming methods.\n","sig":null,"attributes":[{"value":"*\nThe type returned by streaming methods.\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":48014,"byte_end":48060,"line_start":808,"line_end":810,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":791},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"value","qualname":"::value","value":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/mod.rs","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":920},{"krate":0,"index":1120},{"krate":0,"index":1123},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1132}],"decl_id":null,"docs":"A streamable value.","sig":null,"attributes":[{"value":"*\nA streamable value.\n\n# The `Value` trait\n\nA [`Value`] is a type that has structure, like a number, string, map, or sequence.\n\n## Deriving `Value`\n\nUse the `derive` Cargo feature to support automatic implementations of the `Value` trait:\n\n```toml,ignore\n[dependencies.sval]\nfeatures = [\"derive\"]\n```\n\nThen derive the `Value` for struct-like datastructures:\n\n```\n# fn main() {}\n# #[cfg(all(feature = \"std\", feature = \"derive\"))]\n# mod test {\nuse sval::Value;\n\n#[derive(Value)]\npub struct Data {\n    id: u32,\n    title: String,\n}\n# }\n```\n\nThe trait can also be implemented manually:\n\n```\nuse sval::value::{self, Value};\n\npub struct Id(u64);\n\nimpl Value for Id {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.u64(self.0)\n    }\n}\n```\n\n## Sequences\n\nA sequence can be visited by iterating over its elements:\n\n```\nuse sval::value::{self, Value};\n\npub struct Seq(Vec<u64>);\n\nimpl Value for Seq {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.seq_begin(Some(self.0.len()))?;\n\n        for v in &self.0 {\n            stream.seq_elem(v)?;\n        }\n\n        stream.seq_end()\n    }\n}\n```\n\n## Maps\n\nA map can be visited by iterating over its key-value pairs:\n\n```\n# fn main() {}\n# #[cfg(feature = \"std\")]\n# mod test {\nuse std::collections::BTreeMap;\nuse sval::value::{self, Value};\n\npub struct Map(BTreeMap<String, u64>);\n\nimpl Value for Map {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.map_begin(Some(self.0.len()))?;\n\n        for (k, v) in &self.0 {\n            stream.map_key(k)?;\n            stream.map_value(v)?;\n        }\n\n        stream.map_end()\n    }\n}\n# }\n```\n\n## Structure that isn't known upfront\n\nTypes can stream a structure that's different than what they use internally.\nIn the following example, the `Map` type doesn't have any keys or values,\nbut serializes a nested map like `{\"nested\": {\"key\": 42}}`:\n\n```\nuse sval::value::{self, Value};\n\npub struct Map;\n\nimpl Value for Map {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.map_begin(Some(1))?;\n\n        stream.map_key_begin()?.str(\"nested\")?;\n        stream.map_value_begin()?.map_begin(Some(1))?;\n        stream.map_key_begin()?.str(\"key\")?;\n        stream.map_value_begin()?.u64(42)?;\n        stream.map_end()?;\n\n        stream.map_end()\n    }\n}\n```\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/mod.rs","byte_start":97543,"byte_end":99908,"line_start":1,"line_end":122,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1221},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":122023,"byte_end":122033,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"OwnedValue","qualname":"::value::owned::OwnedValue","value":"","parent":null,"children":[],"decl_id":null,"docs":"An owned, immutable value.","sig":null,"attributes":[{"value":"*\nAn owned, immutable value.\n\nOwned values are safe to share and are cheap to clone.\n\nAdd the `std` feature to your `Cargo.toml` to enable this type:\n\n```toml,no_run\n[dependencies.sval]\nfeatures = [\"std\"]\n```\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":121781,"byte_end":121994,"line_start":33,"line_end":44,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":122608,"byte_end":122615,"line_start":65,"line_end":65,"column_start":12,"column_end":19},"name":"collect","qualname":"<OwnedValue>::collect","value":"pub fn collect<impl Value: Value>(impl Value) -> Self","parent":null,"children":[],"decl_id":null,"docs":"    Get an owned value from an arbitrary [`Value`].","sig":null,"attributes":[{"value":"*\n    Get an owned value from an arbitrary [`Value`].\n\n    The given value doesn't need to be `Send + Sync + 'static`.\n\n    Some primitive types can be converted into an `OwnedValue`\n    for free. These types have a corresponding `From` implementation.\n\n    The structure of the given value will be streamed into\n    a sharable representation. That means this method is more\n    expensive for more complex values.\n\n    Prefer the `From` impls and `from_shared` method where possible.\n\n    [`Value`]: struct.Value.html\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":122070,"byte_end":122596,"line_start":49,"line_end":64,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":123359,"byte_end":123370,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"from_shared","qualname":"<OwnedValue>::from_shared","value":"pub fn from_shared<impl Into<Arc<dyn Value + Send + Sync>>: Into<Arc<dyn\n                                                                     Value +\n                                                                     Send +\n                                                                     Sync>>>(impl Into<Arc<dyn Value + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":"    Get an owned value from an already shared [`Value`].","sig":null,"attributes":[{"value":"*\n    Get an owned value from an already shared [`Value`].\n\n    The given value must be `Send + Sync + 'static`.\n\n    [`Value`]: struct.Value.html\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":123164,"byte_end":123319,"line_start":79,"line_end":85,"column_start":5,"column_end":7}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":123324,"byte_end":123347,"line_start":86,"line_end":86,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":1126},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/mod.rs","byte_start":105106,"byte_end":105111,"line_start":353,"line_end":353,"column_start":11,"column_end":16},"name":"Value","qualname":"::value::Value","value":"Value","parent":null,"children":[{"krate":0,"index":1127}],"decl_id":null,"docs":"A value with a streamable structure.","sig":null,"attributes":[{"value":"*\nA value with a streamable structure.\n\n# Implementing `Value`\n\nImplementations of `Value` are expected to conform to the following\nmodel:\n\n## Only a single primitive, map or sequence is streamed\n\nThe following `Value` is valid:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\nimpl Value for MyValue {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        // VALID: The stream can take the primitive\n        // value 42\n        stream.any(42)\n    }\n}\n```\n\nThe following `Value` is not valid:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\nimpl Value for MyValue {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.any(42)?;\n\n        // INVALID: The stream already received the\n        // primitive value 42\n        stream.any(43)\n    }\n}\n```\n\n## All maps and sequences are completed, and in the right order\n\nThe following `Value` is valid:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\nimpl Value for MyValue {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.map_begin(None)?;\n        stream.map_key(\"a\")?;\n        stream.map_value_begin()?.seq_begin(None)?;\n\n        // VALID: The sequence is completed, then the map is completed\n        stream.seq_end()?;\n        stream.map_end()\n    }\n}\n```\n\nThe following `Value` is not valid:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\nimpl Value for MyValue {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.map_begin(None)?;\n        stream.map_key(\"a\")?;\n        stream.map_value_begin()?.seq_begin(None)?;\n\n        // INVALID: The map is completed before the sequence,\n        // even though the sequence was started last.\n        stream.map_end()?;\n        stream.seq_end()\n    }\n}\n```\n\nThe following `Value` is not valid:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\nimpl Value for MyValue {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.map_begin(None)?;\n\n        // INVALID: The map is never completed\n        Ok(())\n    }\n}\n```\n\n## Map keys and values are received before their corresponding structure\n\nThe following `Value` is valid:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\nimpl Value for MyValue {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.map_begin(None)?;\n\n        // VALID: The `map_key` and `map_value` methods\n        // always call the underlying stream correctly\n        stream.map_key(\"a\")?;\n        stream.map_value(\"b\")?;\n\n        // VALID: `map_key` and `map_value` are called before\n        // their actual values are given\n        stream.map_key_begin()?.any(\"c\")?;\n        stream.map_value_begin()?.any(\"d\")?;\n\n        stream.map_end()\n    }\n}\n```\n\nThe following `Value` is not valid:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\nimpl Value for MyValue {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.map_begin(None)?;\n\n        // INVALID: The underlying `map_key` and `map_value` methods\n        // aren't being called before their actual values are given\n        stream.any(\"a\")?;\n        stream.any(\"b\")?;\n\n        stream.map_end()\n    }\n}\n```\n\n## Map keys are received before values\n\nThe following `Value` is valid:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\nimpl Value for MyValue {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.map_begin(None)?;\n\n        // VALID: The key is streamed before the value\n        stream.map_key(\"a\")?;\n        stream.map_value(\"b\")?;\n\n        stream.map_end()\n    }\n}\n```\n\nThe following `Value` is not valid:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\nimpl Value for MyValue {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.map_begin(None)?;\n\n        // INVALID: The value is streamed before the key\n        stream.map_value(\"b\")?;\n        stream.map_key(\"a\")?;\n\n        stream.map_end()\n    }\n}\n```\n\n## Sequence elements are received before their corresponding structure\n\nThe following `Value` is valid:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\nimpl Value for MyValue {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.seq_begin(None)?;\n\n        // VALID: The `seq_elem` method\n        // always calls the underlying stream correctly\n        stream.seq_elem(\"a\")?;\n\n        // VALID: `seq_elem` is called before\n        // their actual values are given\n        stream.seq_elem_begin()?.any(\"b\")?;\n\n        stream.seq_end()\n    }\n}\n```\n\nThe following `Value` is not valid:\n\n```\n# use sval::value::{self, Value};\n# struct MyValue;\nimpl Value for MyValue {\n    fn stream(&self, stream: &mut value::Stream) -> value::Result {\n        stream.seq_begin(None)?;\n\n        // INVALID: The underlying `seq_elem` method\n        // isn't being called before the actual value is given\n        stream.any(\"a\")?;\n\n        stream.seq_end()\n    }\n}\n```\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/mod.rs","byte_start":100079,"byte_end":105095,"line_start":134,"line_end":352,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/mod.rs","byte_start":106481,"byte_end":106487,"line_start":406,"line_end":406,"column_start":8,"column_end":14},"name":"stream","qualname":"::value::Value::stream","value":"pub fn stream(&Self, &mut Stream) -> Result","parent":{"krate":0,"index":1126},"children":[],"decl_id":null,"docs":"    Stream this value.","sig":null,"attributes":[{"value":"*\n    Stream this value.\n\n    # Examples\n\n    Use a [`stream::OwnedStream`] to stream a value:\n\n    ```no_run\n    # #[cfg(not(feature = \"std\"))]\n    # fn main() {}\n    # #[cfg(feature = \"std\")]\n    # fn main() -> Result<(), Box<dyn std::error::Error>> {\n    use sval::stream::OwnedStream;\n\n    let mut stream = OwnedStream::new(MyStream);\n    stream.any(42)?;\n    # Ok(())\n    # }\n    # use sval::stream::{self, Stream};\n    # struct MyStream;\n    # impl Stream for MyStream {\n    #     fn fmt(&mut self, _: stream::Arguments) -> stream::Result { unimplemented!() }\n    # }\n    ```\n\n    It's less convenient, but the `stream` method can be called directly\n    instead of using `OwnedStream.any`:\n\n    ```no_run\n    # #[cfg(not(feature = \"std\"))]\n    # fn main() {}\n    # #[cfg(feature = \"std\")]\n    # fn main() -> Result<(), Box<dyn std::error::Error>> {\n    use sval::{\n        stream::OwnedStream,\n        value::Value,\n    };\n\n    let mut stream = OwnedStream::new(MyStream);\n    42.stream(&mut stream.borrow_mut())?;\n    # Ok(())\n    # }\n    # use sval::stream::{self, Stream};\n    # struct MyStream;\n    # impl Stream for MyStream {\n    #     fn fmt(&mut self, _: stream::Arguments) -> stream::Result { unimplemented!() }\n    # }\n    ```\n\n    [`sval::stream`]: ../fn.stream.html\n    [`stream::OwnedStream`]: ../stream/struct.OwnedStream.html\n    */","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/mod.rs","byte_start":105118,"byte_end":106473,"line_start":354,"line_end":405,"column_start":5,"column_end":7}}]},{"kind":"Type","id":{"krate":0,"index":1132},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/mod.rs","byte_start":106753,"byte_end":106759,"line_start":422,"line_end":422,"column_start":10,"column_end":16},"name":"Result","qualname":"::value::Result","value":"crate::std::result::Result<(), crate::Error>","parent":null,"children":[],"decl_id":null,"docs":"The type returned by streaming methods.\n","sig":null,"attributes":[{"value":"*\nThe type returned by streaming methods.\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/mod.rs","byte_start":106697,"byte_end":106743,"line_start":419,"line_end":421,"column_start":1,"column_end":3}}]},{"kind":"Function","id":{"krate":0,"index":1143},"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","byte_start":6735,"byte_end":6741,"line_start":320,"line_end":320,"column_start":8,"column_end":14},"name":"stream","qualname":"::stream","value":"pub fn stream<S, impl Value: Value>(S, impl Value) -> Result<S, Error> where\nS: Stream","parent":null,"children":[],"decl_id":null,"docs":"Stream the structure of a [`Value`] using the given [`Stream`].","sig":null,"attributes":[{"value":"*\nStream the structure of a [`Value`] using the given [`Stream`].\n\nThis method is a convenient way of calling [`OwnedStream::stream`](stream/struct.OwnedStream.html#method.stream).\n*/","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","byte_start":6542,"byte_end":6727,"line_start":315,"line_end":319,"column_start":1,"column_end":3}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":7688,"byte_end":7693,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":8914,"byte_end":8919,"line_start":72,"line_end":72,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":9034,"byte_end":9039,"line_start":78,"line_end":78,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":9529,"byte_end":9539,"line_start":101,"line_end":101,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":10326,"byte_end":10336,"line_start":125,"line_end":125,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":11032,"byte_end":11037,"line_start":145,"line_end":145,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":11775,"byte_end":11780,"line_start":175,"line_end":175,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":12102,"byte_end":12107,"line_start":193,"line_end":193,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":12317,"byte_end":12322,"line_start":201,"line_end":201,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":12595,"byte_end":12600,"line_start":211,"line_end":211,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/owned.rs","byte_start":17862,"byte_end":17874,"line_start":26,"line_end":26,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/owned.rs","byte_start":21204,"byte_end":21217,"line_start":170,"line_end":170,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/owned.rs","byte_start":23393,"byte_end":23406,"line_start":273,"line_end":273,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/value.rs","byte_start":24307,"byte_end":24312,"line_start":14,"line_end":14,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/mod.rs","byte_start":15167,"byte_end":15174,"line_start":71,"line_end":71,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/mod.rs","byte_start":15624,"byte_end":15631,"line_start":94,"line_end":94,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/to_debug.rs","byte_start":26444,"byte_end":26451,"line_start":27,"line_end":27,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/to_debug.rs","byte_start":27027,"byte_end":27033,"line_start":52,"line_end":52,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/to_debug.rs","byte_start":28007,"byte_end":28013,"line_start":96,"line_end":96,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":50024,"byte_end":50030,"line_start":31,"line_end":31,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":50331,"byte_end":50337,"line_start":45,"line_end":45,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":50840,"byte_end":50851,"line_start":70,"line_end":70,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51008,"byte_end":51019,"line_start":76,"line_end":76,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51161,"byte_end":51167,"line_start":82,"line_end":82,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51620,"byte_end":51626,"line_start":100,"line_end":100,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51777,"byte_end":51783,"line_start":106,"line_end":106,"column_start":50,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":52755,"byte_end":52764,"line_start":14,"line_end":14,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53552,"byte_end":53561,"line_start":42,"line_end":42,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53703,"byte_end":53712,"line_start":48,"line_end":48,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53857,"byte_end":53866,"line_start":54,"line_end":54,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53999,"byte_end":54008,"line_start":60,"line_end":60,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":54293,"byte_end":54302,"line_start":70,"line_end":70,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55119,"byte_end":55130,"line_start":29,"line_end":29,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59440,"byte_end":59451,"line_start":251,"line_end":251,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":60059,"byte_end":60070,"line_start":286,"line_end":286,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62026,"byte_end":62038,"line_start":388,"line_end":388,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65715,"byte_end":65727,"line_start":578,"line_end":578,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":66316,"byte_end":66328,"line_start":610,"line_end":610,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":611},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71378,"byte_end":71381,"line_start":50,"line_end":50,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":72504,"byte_end":72513,"line_start":108,"line_end":108,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":75189,"byte_end":75193,"line_start":189,"line_end":189,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76182,"byte_end":76187,"line_start":231,"line_end":231,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76251,"byte_end":76256,"line_start":237,"line_end":237,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":83362,"byte_end":83367,"line_start":511,"line_end":511,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":85554,"byte_end":85559,"line_start":613,"line_end":613,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":107616,"byte_end":107622,"line_start":17,"line_end":17,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":110581,"byte_end":110590,"line_start":167,"line_end":167,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":110743,"byte_end":110752,"line_start":174,"line_end":174,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":110904,"byte_end":110910,"line_start":181,"line_end":181,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":111415,"byte_end":111418,"line_start":208,"line_end":208,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":111629,"byte_end":111631,"line_start":218,"line_end":218,"column_start":31,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":111831,"byte_end":111837,"line_start":228,"line_end":228,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":112000,"byte_end":112003,"line_start":235,"line_end":235,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":112216,"byte_end":112224,"line_start":245,"line_end":245,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":113039,"byte_end":113042,"line_start":285,"line_end":285,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":113251,"byte_end":113258,"line_start":295,"line_end":295,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":122053,"byte_end":122063,"line_start":48,"line_end":48,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":123703,"byte_end":123713,"line_start":101,"line_end":101,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":979}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":124255,"byte_end":124265,"line_start":119,"line_end":119,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":124556,"byte_end":124566,"line_start":133,"line_end":133,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":124701,"byte_end":124711,"line_start":139,"line_end":139,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":124844,"byte_end":124854,"line_start":145,"line_end":145,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":124988,"byte_end":124998,"line_start":151,"line_end":151,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125132,"byte_end":125142,"line_start":157,"line_end":157,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125270,"byte_end":125280,"line_start":163,"line_end":163,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125413,"byte_end":125423,"line_start":169,"line_end":169,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":995}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125556,"byte_end":125566,"line_start":175,"line_end":175,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":997}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125697,"byte_end":125707,"line_start":181,"line_end":181,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125839,"byte_end":125849,"line_start":187,"line_end":187,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125981,"byte_end":125991,"line_start":193,"line_end":193,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126117,"byte_end":126127,"line_start":199,"line_end":199,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126256,"byte_end":126266,"line_start":205,"line_end":205,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126397,"byte_end":126407,"line_start":211,"line_end":211,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126532,"byte_end":126542,"line_start":217,"line_end":217,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126667,"byte_end":126677,"line_start":223,"line_end":223,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126809,"byte_end":126819,"line_start":229,"line_end":229,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126955,"byte_end":126965,"line_start":235,"line_end":235,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":127694,"byte_end":127706,"line_start":261,"line_end":261,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":128679,"byte_end":128691,"line_start":291,"line_end":291,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":128867,"byte_end":128879,"line_start":301,"line_end":301,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1036},{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":129897,"byte_end":129908,"line_start":339,"line_end":339,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":130232,"byte_end":130238,"line_start":354,"line_end":354,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":130540,"byte_end":130551,"line_start":369,"line_end":369,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":130686,"byte_end":130697,"line_start":375,"line_end":375,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":131400,"byte_end":131405,"line_start":410,"line_end":410,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":132525,"byte_end":132533,"line_start":449,"line_end":449,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":133298,"byte_end":133306,"line_start":485,"line_end":485,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":136938,"byte_end":136947,"line_start":649,"line_end":649,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":138464,"byte_end":138476,"line_start":693,"line_end":693,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":138880,"byte_end":138892,"line_start":712,"line_end":712,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":141817,"byte_end":141828,"line_start":831,"line_end":831,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1115}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":142200,"byte_end":142211,"line_start":843,"line_end":843,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","byte_start":6310,"byte_end":6313,"line_start":298,"line_end":298,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":278}},{"kind":"Mod","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","byte_start":6420,"byte_end":6426,"line_start":304,"line_end":304,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":374}},{"kind":"Mod","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/mod.rs","byte_start":36779,"byte_end":36784,"line_start":208,"line_end":208,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":618}},{"kind":"Mod","span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/lib.rs","byte_start":6436,"byte_end":6441,"line_start":305,"line_end":305,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":791}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":7688,"byte_end":7693,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":21},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":8914,"byte_end":8919,"line_start":72,"line_end":72,"column_start":21,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":21},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":9034,"byte_end":9039,"line_start":78,"line_end":78,"column_start":23,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":21},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":9529,"byte_end":9539,"line_start":101,"line_end":101,"column_start":21,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":10326,"byte_end":10336,"line_start":125,"line_end":125,"column_start":23,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":11032,"byte_end":11037,"line_start":145,"line_end":145,"column_start":27,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":21},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":11775,"byte_end":11780,"line_start":175,"line_end":175,"column_start":10,"column_end":15},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":21},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":12102,"byte_end":12107,"line_start":193,"line_end":193,"column_start":10,"column_end":15},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":21},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":12317,"byte_end":12322,"line_start":201,"line_end":201,"column_start":27,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":21},"to":{"krate":4,"index":2338}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/error.rs","byte_start":12595,"byte_end":12600,"line_start":211,"line_end":211,"column_start":30,"column_end":35},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":21},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/owned.rs","byte_start":17862,"byte_end":17874,"line_start":26,"line_end":26,"column_start":15,"column_end":27},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/owned.rs","byte_start":21204,"byte_end":21217,"line_start":170,"line_end":170,"column_start":10,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/owned.rs","byte_start":23393,"byte_end":23406,"line_start":273,"line_end":273,"column_start":10,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/value.rs","byte_start":24307,"byte_end":24312,"line_start":14,"line_end":14,"column_start":10,"column_end":15},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":215},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/mod.rs","byte_start":14453,"byte_end":14459,"line_start":38,"line_end":38,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":749},"to":{"krate":0,"index":238}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/mod.rs","byte_start":15167,"byte_end":15174,"line_start":71,"line_end":71,"column_start":21,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":248},"to":{"krate":0,"index":238}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/collect/mod.rs","byte_start":15624,"byte_end":15631,"line_start":94,"line_end":94,"column_start":20,"column_end":27},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":248},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/to_debug.rs","byte_start":26444,"byte_end":26451,"line_start":27,"line_end":27,"column_start":19,"column_end":26},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1146},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/to_debug.rs","byte_start":27027,"byte_end":27033,"line_start":52,"line_end":52,"column_start":18,"column_end":24},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/fmt/to_debug.rs","byte_start":28007,"byte_end":28013,"line_start":96,"line_end":96,"column_start":37,"column_end":43},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":329},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":50024,"byte_end":50030,"line_start":31,"line_end":31,"column_start":25,"column_end":31},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":379},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":50331,"byte_end":50337,"line_start":45,"line_end":45,"column_start":27,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":379},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":50840,"byte_end":50851,"line_start":70,"line_end":70,"column_start":29,"column_end":40},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":399},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51008,"byte_end":51019,"line_start":76,"line_end":76,"column_start":31,"column_end":42},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":399},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51161,"byte_end":51167,"line_start":82,"line_end":82,"column_start":14,"column_end":20},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51620,"byte_end":51626,"line_start":100,"line_end":100,"column_start":45,"column_end":51},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":379},"to":{"krate":1,"index":2913}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/error.rs","byte_start":51777,"byte_end":51783,"line_start":106,"line_end":106,"column_start":50,"column_end":56},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":379},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":52755,"byte_end":52764,"line_start":14,"line_end":14,"column_start":10,"column_end":19},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53552,"byte_end":53561,"line_start":42,"line_end":42,"column_start":39,"column_end":48},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":423},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53703,"byte_end":53712,"line_start":48,"line_end":48,"column_start":39,"column_end":48},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":423},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53857,"byte_end":53866,"line_start":54,"line_end":54,"column_start":41,"column_end":50},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":423},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":53999,"byte_end":54008,"line_start":60,"line_end":60,"column_start":25,"column_end":34},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":423},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/fmt.rs","byte_start":54293,"byte_end":54302,"line_start":70,"line_end":70,"column_start":27,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":423},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":55119,"byte_end":55130,"line_start":29,"line_end":29,"column_start":9,"column_end":20},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":492},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":59440,"byte_end":59451,"line_start":251,"line_end":251,"column_start":9,"column_end":20},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":492},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":60059,"byte_end":60070,"line_start":286,"line_end":286,"column_start":20,"column_end":31},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":492},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":62026,"byte_end":62038,"line_start":388,"line_end":388,"column_start":10,"column_end":22},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":65715,"byte_end":65727,"line_start":578,"line_end":578,"column_start":10,"column_end":22},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/owned.rs","byte_start":66316,"byte_end":66328,"line_start":610,"line_end":610,"column_start":21,"column_end":33},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":557},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":71378,"byte_end":71381,"line_start":50,"line_end":50,"column_start":6,"column_end":9},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":72504,"byte_end":72513,"line_start":108,"line_end":108,"column_start":23,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":637},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":75189,"byte_end":75193,"line_start":189,"line_end":189,"column_start":6,"column_end":10},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76182,"byte_end":76187,"line_start":231,"line_end":231,"column_start":18,"column_end":23},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1197},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":76251,"byte_end":76256,"line_start":237,"line_end":237,"column_start":6,"column_end":11},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":83362,"byte_end":83367,"line_start":511,"line_end":511,"column_start":17,"column_end":22},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1197},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/stream/stack.rs","byte_start":85554,"byte_end":85559,"line_start":613,"line_end":613,"column_start":10,"column_end":15},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1215},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":107616,"byte_end":107622,"line_start":17,"line_end":17,"column_start":19,"column_end":25},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":43437},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":110581,"byte_end":110590,"line_start":167,"line_end":167,"column_start":25,"column_end":34},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":44483},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":110743,"byte_end":110752,"line_start":174,"line_end":174,"column_start":28,"column_end":37},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":423},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":110904,"byte_end":110910,"line_start":181,"line_end":181,"column_start":28,"column_end":34},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":379},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":111415,"byte_end":111418,"line_start":208,"line_end":208,"column_start":31,"column_end":34},"kind":{"Impl":{"id":64}},"from":{"krate":5,"index":313},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":111629,"byte_end":111631,"line_start":218,"line_end":218,"column_start":31,"column_end":33},"kind":{"Impl":{"id":65}},"from":{"krate":5,"index":4648},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":111831,"byte_end":111837,"line_start":228,"line_end":228,"column_start":20,"column_end":26},"kind":{"Impl":{"id":66}},"from":{"krate":5,"index":7606},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":112000,"byte_end":112003,"line_start":235,"line_end":235,"column_start":23,"column_end":26},"kind":{"Impl":{"id":67}},"from":{"krate":5,"index":7063},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":112216,"byte_end":112224,"line_start":245,"line_end":245,"column_start":26,"column_end":34},"kind":{"Impl":{"id":68}},"from":{"krate":5,"index":1378},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":113039,"byte_end":113042,"line_start":285,"line_end":285,"column_start":31,"column_end":34},"kind":{"Impl":{"id":69}},"from":{"krate":5,"index":5966},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/impls.rs","byte_start":113251,"byte_end":113258,"line_start":295,"line_end":295,"column_start":29,"column_end":36},"kind":{"Impl":{"id":70}},"from":{"krate":4,"index":1089},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":122053,"byte_end":122063,"line_start":48,"line_end":48,"column_start":6,"column_end":16},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":123703,"byte_end":123713,"line_start":101,"line_end":101,"column_start":16,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1221},"to":{"krate":0,"index":1126}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":124255,"byte_end":124265,"line_start":119,"line_end":119,"column_start":21,"column_end":31},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":124556,"byte_end":124566,"line_start":133,"line_end":133,"column_start":22,"column_end":32},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":124701,"byte_end":124711,"line_start":139,"line_end":139,"column_start":19,"column_end":29},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":124844,"byte_end":124854,"line_start":145,"line_end":145,"column_start":20,"column_end":30},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":124988,"byte_end":124998,"line_start":151,"line_end":151,"column_start":20,"column_end":30},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125132,"byte_end":125142,"line_start":157,"line_end":157,"column_start":20,"column_end":30},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125270,"byte_end":125280,"line_start":163,"line_end":163,"column_start":21,"column_end":31},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125413,"byte_end":125423,"line_start":169,"line_end":169,"column_start":22,"column_end":32},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125556,"byte_end":125566,"line_start":175,"line_end":175,"column_start":19,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125697,"byte_end":125707,"line_start":181,"line_end":181,"column_start":20,"column_end":30},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125839,"byte_end":125849,"line_start":187,"line_end":187,"column_start":20,"column_end":30},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":125981,"byte_end":125991,"line_start":193,"line_end":193,"column_start":20,"column_end":30},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126117,"byte_end":126127,"line_start":199,"line_end":199,"column_start":21,"column_end":31},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126256,"byte_end":126266,"line_start":205,"line_end":205,"column_start":20,"column_end":30},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126397,"byte_end":126407,"line_start":211,"line_end":211,"column_start":20,"column_end":30},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126532,"byte_end":126542,"line_start":217,"line_end":217,"column_start":21,"column_end":31},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126667,"byte_end":126677,"line_start":223,"line_end":223,"column_start":21,"column_end":31},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126809,"byte_end":126819,"line_start":229,"line_end":229,"column_start":28,"column_end":38},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":126955,"byte_end":126965,"line_start":235,"line_end":235,"column_start":23,"column_end":33},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1221},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":127694,"byte_end":127706,"line_start":261,"line_end":261,"column_start":31,"column_end":43},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1241},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":128679,"byte_end":128691,"line_start":291,"line_end":291,"column_start":26,"column_end":38},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1241},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":128867,"byte_end":128879,"line_start":301,"line_end":301,"column_start":19,"column_end":31},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1241},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":129897,"byte_end":129908,"line_start":339,"line_end":339,"column_start":39,"column_end":50},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":130232,"byte_end":130238,"line_start":354,"line_end":354,"column_start":44,"column_end":50},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":379},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":130540,"byte_end":130551,"line_start":369,"line_end":369,"column_start":21,"column_end":32},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":130686,"byte_end":130697,"line_start":375,"line_end":375,"column_start":23,"column_end":34},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":131400,"byte_end":131405,"line_start":410,"line_end":410,"column_start":6,"column_end":11},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1271},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":132525,"byte_end":132533,"line_start":449,"line_end":449,"column_start":6,"column_end":14},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1051},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":133298,"byte_end":133306,"line_start":485,"line_end":485,"column_start":17,"column_end":25},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1051},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":136938,"byte_end":136947,"line_start":649,"line_end":649,"column_start":6,"column_end":15},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":138464,"byte_end":138476,"line_start":693,"line_end":693,"column_start":6,"column_end":18},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":138880,"byte_end":138892,"line_start":712,"line_end":712,"column_start":17,"column_end":29},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1082},"to":{"krate":0,"index":749}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":141817,"byte_end":141828,"line_start":831,"line_end":831,"column_start":10,"column_end":21},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1261},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hekuta/.cargo/registry/src/github.com-1ecc6299db9ec823/sval-1.0.0-alpha.5/src/value/owned.rs","byte_start":142200,"byte_end":142211,"line_start":843,"line_end":843,"column_start":20,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1261},"to":{"krate":4,"index":2338}}]}